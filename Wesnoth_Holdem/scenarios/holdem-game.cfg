######################### HOLD'EM INIT ##########################
#define INIT_HOLDEM NUM_PLAYERS X1 Y1 X2 Y2 X3 Y3 X4 Y4 X5 Y5 HORSE_X HORSE_Y
#Set Zilead's gold
[store_gold]
  side=1
  variable=zilead_gold
[/store_gold]
{VARIABLE_OP zilead_gold multiply -1}
{VARIABLE_OP zilead_gold add $gambler[0].gold}
[gold]
  side=1
  amount=$zilead_gold
[/gold]
{CLEAR_VARIABLE zilead_gold}
 
#Create gold horse
{UNIT (Holdem Horse) (Holdem Horse) ( _ "Holdem Horse") 3 ({HORSE_X}) ({HORSE_Y})}
#Initialize variables
{VARIABLE HEART 0}
{VARIABLE DIAMOND 1}
{VARIABLE CLUB 2}
{VARIABLE SPADE 3}
{VARIABLE ACE 14}
{VARIABLE HAND_HIGH_CARD 1}
{VARIABLE HAND_PAIR 2}
{VARIABLE HAND_TWO_PAIR 3}
{VARIABLE HAND_THREE_KIND 4}
{VARIABLE HAND_STRAIGHT 5}
{VARIABLE HAND_FLUSH 6}
{VARIABLE HAND_FULL_HOUSE 7}
{VARIABLE HAND_FOUR_KIND 8}
{VARIABLE HAND_STRAIGHT_FLUSH 9}
{VARIABLE num_players ({NUM_PLAYERS})}
#set player card locations
{VARIABLE table_card[0].x ({X1})}
{VARIABLE table_card[0].y ({Y1})}
{VARIABLE table_card[1].x ({X2})}
{VARIABLE table_card[1].y ({Y2})}
{VARIABLE table_card[2].x ({X3})}
{VARIABLE table_card[2].y ({Y3})}
{VARIABLE table_card[3].x ({X4})}
{VARIABLE table_card[3].y ({Y4})}
{VARIABLE table_card[4].x ({X5})}
{VARIABLE table_card[4].y ({Y5})}
#enddef
  
######################## HOLD'EM PLAYING ########################

#
# Play 30 rounds of Wesnoth Hold'em
#
#define NEW_HOLDEM_GAME N_ROUNDS
#Random dealer
{VARIABLE num_players_minus $num_players}
{VARIABLE_OP num_players_minus add -1}
{VARIABLE_OP dealer_range format "0..|$num_players_minus|"}
{VARIABLE_OP dealer_idx random $dealer_range}
{VARIABLE num_rounds ({N_ROUNDS})}
{VARIABLE num_rounds_plus_1 $num_rounds}
{VARIABLE_OP num_rounds_plus_1 add 1}

#{DEBUG_MSG "dealer_range=|$dealer_range|,dealer_idx=|$dealer_idx|,num_round=|$num_rounds|"}
{CLEAR_VARIABLE dealer_range}

#Play 30 hands
{FOR_UPTO holdem_round 1 $num_rounds_plus_1}
  {SHUFFLE_CARDS}

  #Set button
  {VARIABLE_OP dealer_idx add 1}
  [if]
    [variable]
      name=dealer_idx
      equals=$num_players
    [/variable]
    [then]
      {VARIABLE dealer_idx 0}
    [/then]
  [/if]

#  {DEBUG_MSG "deck.length=|$deck.length|, dealer_idx=|$dealer_idx|, num_players=|$num_players|"}

  #Initialize variables
  {VARIABLE bet 0}
  {VARIABLE pot 0}
  {VARIABLE min_bet 10}
  {VARIABLE small_blind 5}
  {VARIABLE num_active_players $num_players}

  {MESSAGE_FROM_GAMBLER $dealer_idx ( _ "It is round |$holdem_round| of |$num_rounds| and I have the button.")}

  #Deal cards and reset gambler variables
  {FOR_EACH_GAMBLER p}
    {DEAL_CARDS $p}
    {VARIABLE active_player_$p yes}
    {VARIABLE gambler[$p].bet 0}
  {NEXT p}

  #Show Zilead's cards
  {SHOW_HAND 0 off}
  {VARIABLE_OP value_overlay format "values/|$gambler[0].card1.value|.png"}
  [unit_overlay]
    x=$gambler[0].card1.x
    y=$gambler[0].card1.y
    image=$value_overlay
  [/unit_overlay]
  {VARIABLE_OP value_overlay format "values/|$gambler[0].card2.value|.png"}
  [unit_overlay]
    x=$gambler[0].card2.x
    y=$gambler[0].card2.y
    image=$value_overlay
  [/unit_overlay]
  {CLEAR_VARIABLE value_overlay}

  {BETTING_ROUND 2}
  {BETTING_ROUND 5}
  {BETTING_ROUND 6}
  {BETTING_ROUND 7}

  #Give player(s) with best hand (or only survivor) the gold
  {VARIABLE winner_count 0}
  {FOR_EACH_GAMBLER p}
    {VARIABLE_OP is_active to_variable active_player_$p}
    [if]
      {VAR_EQUALS is_active yes}
      [then]
        [if]
          #Initially, first active player is winner
          {VAR_EQUALS winner_count 0}
          [then]
            {VARIABLE winner_0 $p}
            {VARIABLE winner_count 1}
          [/then]
          [else]
            {COMPARE_HANDS $p $winnner_0}
            #if hands are identical, then active player is also a winner
            [if]
              {VAR_EQUALS compare_result 0}
              [then]
                {VARIABLE winner_$winner_count $p}
                {VARIABLE_OP winner_count add 1}
              [/then]
            [/if]
            #if active player has better hand, then he is the only winner
            [if]
              {VAR_EQUALS compare_result 1}
              [then]
                {VARIABLE winner_0 $p}
                {VARIABLE winner_count 1}
              [/then]
            [/if]
          [/else]
        [/if]
      [/then]
    [/if]
  {NEXT p}

  #Divide the pot by the number of winners
  {DIVIDE_POT $winner_count}
  #Give pot to each winner
  {VARIABLE winner_index 0}
  [while]
    {VAR_LESS winner_index $winner_count}
    [do]
      {VARIABLE_OP winner_i format $winner_$winner_index}
      {VARIABLE_OP hand_string format $gambler[$winner_i].hand_text}
      #Give player gold
      {VARIABLE_OP gambler[$winner_i].gold add $pot}
      #If Zilead is winner, set side 1 gold
      [if]
        {VAR_EQUALS winner_i 0}
        [then]
          [gold]
            side=1
            amount=$pot
          [/gold]
        [/then]
      [/if]
      {MESSAGE_FROM_GAMBLER $winner_i ( _ "I won |$pot| with |$hand_string|.")}
      {VARIABLE_OP winner_index add 1}
    [/do]
  [/while]
{NEXT holdem_round}
{CLEAR_VARIABLE holdem_round}
{CLEAR_VARIABLE num_rounds_plus_1}
#Find winner
{VARIABLE winner_i 0}
{VARIABLE winner_gold $gambler[0].gold}
{FOR_EACH_GAMBLER p}
  {VARIABLE_OP gold_p format $gambler[$p].gold}
  [if]
    {VAR_GREATER gold_p $winner_gold}
    [then]
      {VARIABLE winner_i $p}
      {VARIABLE winner_gold $gold_p}
    [/then]
  [/if]
{NEXT p}
{MESSAGE_FROM_GAMBLER $winner_i ( _ "I have the most gold.")}

#Victory if Zilead is the winner
[if]
  {VAR_EQUALS winner_i 0}
  [then]
    [endlevel]
      result=continue
    [/endlevel]
  [/then]
  [else]
    [endlevel]
      result=defeat
    [/endlevel]
  [/else]
[/if]
#enddef

#
# Move the horse to player I (the active player)
#
#define MOVE_HORSE I
#Move horse to player I
[store_unit]
  variable=horse_store
  kill=yes
  [filter]
    type=Holdem Horse
  [/filter]
[/store_unit]
{VARIABLE horse_prev_x $horse_store[0].x}
{VARIABLE horse_prev_y $horse_store[0].y}
{VARIABLE_OP horse_move_x format (|$horse_prev_x|,|$gambler[{I}].gold_x|)}
{VARIABLE_OP horse_move_y format (|$horse_prev_y|,|$gambler[{I}].gold_y|)}
[move_unit_fake]
  type=Holdem Horse
  x=$horse_move_x
  y=$horse_move_y
[/move_unit_fake]
{VARIABLE_OP horse_store[0].x format $gambler[{I}].gold_x}
{VARIABLE_OP horse_store[0].y format $gambler[{I}].gold_y}
[unstore_unit]
  variable=horse_store[0]
  find_vacant=yes
[/unstore_unit]
[redraw]
[/redraw]
{CLEAR_VARIABLE player_i}
{CLEAR_VARIABLE horse_store}
{CLEAR_VARIABLE horse_prev_x}
{CLEAR_VARIABLE horse_prev_y}
{CLEAR_VARIABLE horse_move_x}
{CLEAR_VARIABLE horse_move_y}
#enddef

#
# Initially, the big blind is the last better. If someone bets/raises, then
# the player to his left is the last better. Betting round ends when
# last better calls/checks.
#
#define BETTING_ROUND N_CARDS
{VARIABLE n ({N_CARDS})}
[if]
  {VAR_GREATER num_active_players 1}
  [then]
    {VARIABLE next_player $dealer_idx}
    #Reset bets
    {VARIABLE bet 0}
    {FOR_EACH_GAMBLER p}
      {VARIABLE gambler[$p].bet 0}
    {NEXT p}
    #Reset last better
    {VARIABLE last_better 20}

    #Preflop: big blinds
    [if]
      {VAR_EQUALS n 2}
      [then]
        {NEXT_PLAYER_BLIND $small_blind}
        {NEXT_PLAYER_BLIND $min_bet}
      [/then]
    [/if]
    #Flop: deal flop before betting
    [if]
      {VAR_EQUALS n 5}
      [then]
        {DEAL_FLOP}
      [/then]
    [/if]
    #Turn: deal turn before betting
    [if]
      {VAR_EQUALS n 6}
      [then]
        {DEAL_TURN}
      [/then]
    [/if]
    #River: deal river before betting
    [if]
      {VAR_EQUALS n 7}
      [then]
        {DEAL_RIVER}
      [/then]
    [/if]

    #analyze player hands
    {FOR_EACH_GAMBLER p}
      {ANALYZE_HAND $p}
    {NEXT p}

    #The guy to the left of first better will play last
    {NEXT_PLAYER_BET $n}
    {PREV_BETTER last_better}

    #betting continues until everyone folds or last better checks/calls
    {VARIABLE done_betting no}
    [while]
      {VAR_GREATER num_active_players 1}
      {VAR_EQUALS done_betting no}
      [do]
        {NEXT_PLAYER_BET $n}
        #if player bet/raised, then last better is player before him
        [if]
          {VAR_EQUALS player_action BET}
          [then]
            {PREV_BETTER last_better}
          [/then]
        [/if]
        #Stop betting round when last player calls/checks
        [if]
          {VAR_EQUALS next_player $last_better}
          [then]
            {VARIABLE done_betting yes}
          [/then]
        [/if]
      [/do]
    [/while]
  [/then]
[/if]
#enddef

#define COMPARE_HANDS I1 I2
{VARIABLE_OP rank1 format $gambler[{I1}].hand_rank}
{VARIABLE_OP rank2 format $gambler[{I2}].hand_rank}
{VARIABLE compare_result 0}
#First compare hand types (e.g. full house vs. straight)
[if]
  {VAR_GREATER rank1 $rank2}
  [then]
    {VARIABLE compare_result 1}
  [/then]
[/if]
[if]
  {VAR_GREATER rank2 $rank1}
  [then]
    {VARIABLE compare_result -1}
  [/then]
[/if]
#If hand types are same, then compare card values (high to low)
[if]
  {VAR_EQUALS rank1 $rank2}
  {VAR_EQUALS compare_result 0}
  [then]
    {VARIABLE hand_i 0}
    [while]
      {VAR_EQUALS compare_result 0}
      {VAR_LESS hand_i 5}
      [do]
        {VARIABLE_OP c1 format $gambler[{I1}].best_hand[$hand_i].value}
        {VARIABLE_OP c2 format $gambler[{I2}].best_hand[$hand_i].value}
        [if]
          {VAR_GREATER c1 $c2}
          [then]
            {VARIABLE compare_result 1}
          [/then]
        [/if]
        [if]
          {VAR_GREATER c2 $c1}
          [then]
            {VARIABLE compare_result -1}
          [/then]
        [/if]
        {VARIABLE_OP hand_i add 1}
      [/do] 
    [/while]
  [/then]
[/if]
#enddef

#define DIVIDE_POT NUM_WINNERS
{VARIABLE winner_count ({NUM_WINNERS})}

{VARIABLE multiply_by 1}
[if]
  {VAR_EQUALS winner_count 2}
  [then]
    {VARIABLE multiply_by 0.5}
  [/then]
[/if]
[if]
  {VAR_EQUALS winner_count 3}
  [then]
    {VARIABLE multiply_by 0.333333333}
  [/then]
[/if]
[if]
  {VAR_EQUALS winner_count 4}
  [then]
    {VARIABLE multiply_by 0.25}
  [/then]
[/if]
[if]
  {VAR_EQUALS winner_count 5}
  [then]
    {VARIABLE multiply_by 0.2}
  [/then]
[/if]
[if]
  {VAR_EQUALS winner_count 6}
  [then]
    {VARIABLE multiply_by 0.166666667}
  [/then]
[/if]
[if]
  {VAR_EQUALS winner_count 7}
  [then]
    {VARIABLE multiply_by 0.142857143}
  [/then]
[/if]
[if]
  {VAR_EQUALS winner_count 8}
  [then]
    {VARIABLE multiply_by 0.125}
  [/then]
[/if]
[if]
  {VAR_GREATER winner_count 8}
  [then]
    {DEBUG_MSG "Error: DIVIDE_POT"}
  [/then]
[/if]
{VARIABLE_OP pot multiply $multiply_by}
#enddef

############### PLAYER CREATION AND MODIFICATION ################

#
# Set card coordinates, horse coordinates (gold_x,gold_y).
#
#define INIT_GAMBLER I CX1 CY1 CX2 CY2 GX GY
{VARIABLE gambler[{I}].card1.x ({CX1})}
{VARIABLE gambler[{I}].card1.y ({CY1})}
{VARIABLE gambler[{I}].card2.x ({CX2})}
{VARIABLE gambler[{I}].card2.y ({CY2})}
{VARIABLE gambler[{I}].gold_x ({GX})}
{VARIABLE gambler[{I}].gold_y ({GY})}
{RESET_GAMBLER ({I})}
#enddef

#
# Show gambler's pocket cards.
# Usage 1: {SHOW_HAND 5 on} to show stoned cards
# Usage 2: {SHOW_HAND 5 off} to show normal cards
#
#define SHOW_HAND INDEX STONED
{VARIABLE_OP type format $gambler[{INDEX}].card1.type}
{VARIABLE_OP x format $gambler[{INDEX}].card1.x}
{VARIABLE_OP y format $gambler[{INDEX}].card1.y}
{SHOW_CARD $type $x $y ({STONED})}
{VARIABLE_OP type format $gambler[{INDEX}].card2.type}
{VARIABLE_OP x format $gambler[{INDEX}].card2.x}
{VARIABLE_OP y format $gambler[{INDEX}].card2.y}
{SHOW_CARD $type $x $y ({STONED})}
#enddef

#define GET_CARD1 I
{VARIABLE_OP card_value format $gambler[{I}].card1.value}
{VARIABLE_OP card_suit format $gambler[{I}].card1.suit}
#enddef

#define SET_CARD1 I TYPE VALUE SUIT
{VARIABLE gambler[{I}].card1.type ({TYPE})}
{VARIABLE gambler[{I}].card1.value ({VALUE})}
{VARIABLE gambler[{I}].card1.suit ({SUIT})}
#enddef

#define GET_CARD2 I
{VARIABLE_OP card_value format $gambler[{I}].card2.value}
{VARIABLE_OP card_suit format $gambler[{I}].card2.suit}
#enddef

#define SET_CARD2 I TYPE VALUE SUIT
{VARIABLE gambler[{I}].card2.type ({TYPE})}
{VARIABLE gambler[{I}].card2.value ({VALUE})}
{VARIABLE gambler[{I}].card2.suit ({SUIT})}
#enddef

#define GET_CARD I CARD_INDEX
{VARIABLE_OP card_value format ($gambler[{I}].all_cards[{CARD_INDEX}].value)}
{VARIABLE_OP card_suit format ($gambler[{I}].all_cards[{CARD_INDEX}].suit)}
{VARIABLE_OP card_type format ($gambler[{I}].all_cards[{CARD_INDEX}].type)}
#enddef

#define GET_GOLD I VAR
{VARIABLE ({VAR}) $gambler[{I}].gold}
#enddef

#define SET_GOLD I AMT
{VARIABLE gambler[{I}].gold ({AMT})}
#enddef

#define REPLACE_GAMBLER I DESC TYPE GOLD
{VARIABLE gambler[{I}].desc ({DESC})}
{VARIABLE gambler[{I}].type ({TYPE})}
{VARIABLE gambler[{I}].gold ({GOLD})}
#enddef

#define RESET_GAMBLER I
{VARIABLE gambler[{I}].bet 0}
{VARIABLE gambler[{I}].num_cards 0}
{VARIABLE gambler[{I}].hand_rank 0}
#enddef



#define SHOW_CARD TYPE X Y STONED
[if]
  [have_unit]
    type=$type
    x=$x
    y=$y
  [/have_unit]
  [then]
    [kill]  
      type=$type
      x=$x
      y=$y
    [/kill]
  [/then]
[/if]
[unit]
  side=3
  description=Folded
  type={TYPE}
  x={X}
  y={Y}
  [status]
    stone={STONED}
  [/status]
[/unit]
#enddef

#################### CARD SHUFFLING/DEALING #####################

#
# Randomly add each of the 52 cards to the deck
#
#define SHUFFLE_CARDS
#Destroy cards
[kill]
  side=3
  [not]
    description=King Theomund
  [/not]
  [not]
    description=Queen Edina
  [/not]
  [not]
    type=Holdem Horse
  [/not]
[/kill]
{VARIABLE deck_idx 0}
{CLEAR_VARIABLE deck}
{VARIABLE deck_length 0}

{ADD_CARD (Two Hearts) 2 $HEART}
{ADD_CARD (Two Diamonds) 2 $DIAMOND}
{ADD_CARD (Two Clubs) 2 $CLUB}
{ADD_CARD (Two Spades) 2 $SPADE}
{ADD_CARD (Three Hearts) 3 $HEART}
{ADD_CARD (Three Diamonds) 3 $DIAMOND}
{ADD_CARD (Three Clubs) 3 $CLUB}
{ADD_CARD (Three Spades) 3 $SPADE}
{ADD_CARD (Four Hearts) 4 $HEART}
{ADD_CARD (Four Diamonds) 4 $DIAMOND}
{ADD_CARD (Four Clubs) 4 $CLUB}
{ADD_CARD (Four Spades) 4 $SPADE}
{ADD_CARD (Five Hearts) 5 $HEART}
{ADD_CARD (Five Diamonds) 5 $DIAMOND}
{ADD_CARD (Five Clubs) 5 $CLUB}
{ADD_CARD (Five Spades) 5 $SPADE}
{ADD_CARD (Six Hearts) 6 $HEART}
{ADD_CARD (Six Diamonds) 6 $DIAMOND}
{ADD_CARD (Six Clubs) 6 $CLUB}
{ADD_CARD (Six Spades) 6 $SPADE}
{ADD_CARD (Seven Hearts) 7 $HEART}
{ADD_CARD (Seven Diamonds) 7 $DIAMOND}
{ADD_CARD (Seven Clubs) 7 $CLUB}
{ADD_CARD (Seven Spades) 7 $SPADE}
{ADD_CARD (Eight Hearts) 8 $HEART}
{ADD_CARD (Eight Diamonds) 8 $DIAMOND}
{ADD_CARD (Eight Clubs) 8 $CLUB}
{ADD_CARD (Eight Spades) 8 $SPADE}
{ADD_CARD (Nine Hearts) 9 $HEART}
{ADD_CARD (Nine Diamonds) 9 $DIAMOND}
{ADD_CARD (Nine Clubs) 9 $CLUB}
{ADD_CARD (Nine Spades) 9 $SPADE}
{ADD_CARD (Ten Hearts) 10 $HEART}
{ADD_CARD (Ten Diamonds) 10 $DIAMOND}
{ADD_CARD (Ten Clubs) 10 $CLUB}
{ADD_CARD (Ten Spades) 10 $SPADE}
{ADD_CARD (Jack Hearts) 11 $HEART}
{ADD_CARD (Jack Diamonds) 11 $DIAMOND}
{ADD_CARD (Jack Clubs) 11 $CLUB}
{ADD_CARD (Jack Spades) 11 $SPADE}
{ADD_CARD (Queen Hearts) 12 $HEART}
{ADD_CARD (Queen Diamonds) 12 $DIAMOND}
{ADD_CARD (Queen Clubs) 12 $CLUB}
{ADD_CARD (Queen Spades) 12 $SPADE}
{ADD_CARD (King Hearts) 13 $HEART}
{ADD_CARD (King Diamonds) 13 $DIAMOND}
{ADD_CARD (King Clubs) 13 $CLUB}
{ADD_CARD (King Spades) 13 $SPADE}
{ADD_CARD (Ace Hearts) 14 $HEART}
{ADD_CARD (Ace Diamonds) 14 $DIAMOND}
{ADD_CARD (Ace Clubs) 14 $CLUB}
{ADD_CARD (Ace Spades) 14 $SPADE}
#enddef

#
# Deal two cards (pocket) to the specified player
#
#define DEAL_CARDS INDEX
{RESET_GAMBLER ({INDEX})}
{CLEAR_VARIABLE gambler[{INDEX}].all_cards}

{NEXT_CARD}
{SET_CARD1 ({INDEX}) $next_card.type $next_card.value $next_card.suit}
{ADD_TO_HAND ({INDEX}) $next_card.value $next_card.suit} 
{NEXT_CARD}
{SET_CARD2 ({INDEX}) $next_card.type $next_card.value $next_card.suit}
{ADD_TO_HAND ({INDEX}) $next_card.value $next_card.suit} 
#enddef

#
# Sets variable "next_card" to the next card in the deck
#
#define NEXT_CARD
[if]
  [variable]
    name=deck_idx
    less_than=$deck.length
  [/variable]
  [then]
    {VARIABLE_OP next_card.type format $deck[$deck_idx].type}
    {VARIABLE_OP next_card.value format $deck[$deck_idx].value}
    {VARIABLE_OP next_card.suit format $deck[$deck_idx].suit}
    {VARIABLE_OP deck_idx add 1}
  [/then]
  [else]
    {DEBUG_MSG "ERROR: no more cards"}
  [/else]
[/if]
#enddef

#define DEAL_FLOP
{DEAL_TABLE_CARD 0}
{DEAL_TABLE_CARD 1}
{DEAL_TABLE_CARD 2}
#enddef

#define DEAL_TURN
{DEAL_TABLE_CARD 3}
#enddef

#define DEAL_RIVER
{DEAL_TABLE_CARD 4}
#enddef

#define ADD_CARD TYPE VALUE SUIT
{VARIABLE r 0}
[if]
  [variable]
    name=deck_length
    greater_than=0
  [/variable]
  [then]
    {VARIABLE_OP range format (0..$deck_length)}
    {VARIABLE_OP r random $range}
  [/then]
[/if]

[if]
  [variable]
    name=r
    less_than=$deck_length
  [/variable]
  [then]
    {VARIABLE_OP deck[$deck_length].value format $deck[$r].value}
    {VARIABLE_OP deck[$deck_length].suit format $deck[$r].suit}
    {VARIABLE_OP deck[$deck_length].type format $deck[$r].type}
  [/then]
[/if]
{VARIABLE deck[$r].value ({VALUE})}
{VARIABLE deck[$r].suit ({SUIT})}
{VARIABLE deck[$r].type ({TYPE})}
{VARIABLE_OP deck_length add 1}
#enddef

#define ADD_TO_HAND INDEX VALUE SUIT
{VARIABLE index ({INDEX})}
{VARIABLE_OP i format $gambler[{INDEX}].num_cards}
{VARIABLE break no}
#find insertion point (hand sorted high to low)
[while]
  [variable]
    name=i
    greater_than=0
  [/variable]
  [variable]
    name=break
    equals=no
  [/variable]
  [do]
    {VARIABLE j $i}
    {VARIABLE_OP j add -1}
    {VARIABLE_OP value_j format $gambler[$index].all_cards[$j].value}
    {VARIABLE_OP suit_j format $gambler[$index].all_cards[$j].suit}

    [if]
      [variable]
        name=value_j
        greater_than={VALUE}
      [/variable]
      [then]
        {VARIABLE break yes}
      [/then]
      [else]
        {VARIABLE gambler[$index].all_cards[$i].value $value_j}
        {VARIABLE gambler[$index].all_cards[$i].suit $suit_j}
        {VARIABLE_OP i add -1}
      [/else]
    [/if]
  [/do]
[/while]
#insert card
{VARIABLE_OP gambler[$index].all_cards[$i].value format ({VALUE})}
{VARIABLE_OP gambler[$index].all_cards[$i].suit format ({SUIT})}
{VARIABLE_OP gambler[{INDEX}].num_cards add 1}
#enddef

#define DEAL_TABLE_CARD INDEX
{NEXT_CARD}

#Show card
[unit]
  side=3
  type=$next_card.type
  description=$next_card.type
  x=$table_card[{INDEX}].x
  y=$table_card[{INDEX}].y
[/unit]

#ifdef HARD
#else
{VARIABLE_OP value_overlay format "values/|$next_card.value|.png"}
[unit_overlay]
  x=$table_card[{INDEX}].x
  y=$table_card[{INDEX}].y
  image=$value_overlay
[/unit_overlay]
{CLEAR_VARIABLE value_overlay}
#endif

[scroll_to_unit]
  type=$next_card.type
[/scroll_to_unit]

#update player hands
{FOR_EACH_GAMBLER p}
  {ADD_TO_HAND $p $next_card.value $next_card.suit}
{NEXT p}

[delay]
  time=1500
[/delay]
#enddef

############################ BETTING ############################

#define NEXT_BETTER
[if]
  {VAR_GREATER num_active_players 1}
  [then]
    {VARIABLE found_player no}

    [while]
      {VAR_EQUALS found_player no}
      [do]
        {VARIABLE_OP next_player add 1}
        [if]
          {VAR_EQUALS next_player $num_players}
          [then]
            {VARIABLE next_player 0}
          [/then]
        [/if]
        {VARIABLE_OP found_player to_variable active_player_$next_player}
      [/do]
    [/while]

  [/then]
  [else]
    {DEBUG_MSG "error: NEXT_BETTER"}
  [/else]
[/if]
#enddef

#define PREV_BETTER VAR
[if]
  {VAR_GREATER num_active_players 1}
  [then]
    {VARIABLE found_player no}
    {VARIABLE prev_player $next_player}
    [while]
      {VAR_EQUALS found_player no}
      [do]
        {VARIABLE_OP prev_player add -1}
        [if]
          {VAR_EQUALS prev_player -1}
          [then]
            {VARIABLE prev_player $num_players}
            {VARIABLE_OP prev_player add -1}
          [/then]
        [/if]
        {VARIABLE_OP found_player to_variable active_player_$prev_player}
      [/do]
    [/while]
    {VARIABLE ({VAR}) $prev_player}
    {CLEAR_VARIABLE found_player}
  [/then]
  [else]
    {DEBUG_MSG "error: PREV_BETTER"}
  [/else]
[/if]
#enddef

#define NEXT_PLAYER_BLIND AMT
{NEXT_BETTER}
{MOVE_HORSE $next_player}
{PLACE_BET ({AMT})}
{VARIABLE bet ({AMT})}
{VARIABLE player_action BLIND}
[delay]
  time=2000
[/delay]
#enddef

#define ZILEAD_BET_OPTIONS
[option]
  message= _ "Bet/Raise 10"
  [command]
    {RAISE_BET 10}
  [/command]
[/option]
[option]
  message= _ "Bet/Raise 20"
  [command]
    {RAISE_BET 20}
  [/command]
[/option]
[option]
  message= _ "Bet/Raise 50"
  [command]
    {RAISE_BET 50}
  [/command]
[/option]
[option]
  message= _ "Bet/Raise 100"
  [command]
    {RAISE_BET 100}
  [/command]
[/option]
[option]
  message= _ "Quit"
  [command]
    [endlevel]
      result=defeat
    [/endlevel]
  [/command]
[/option]
#enddef

#define ZILEAD_BET
[if]  
  {VAR_EQUALS player_bet 0}
  [then]
    [message]
      description=Zilead
      message= _ "I have |$gambler[0].hand_text|. It's my bet."
      [option]
        message= _ "Check"
        [command]
          {CHECK_FOLD}
        [/command]
      [/option]
      {ZILEAD_BET_OPTIONS}
    [/message]
  [/then]
  [else]
    [message]
      description=Zilead
      message= _ "I have |$gambler[0].hand_text|. It's |$player_bet| to call."
      [option]
        message= _ "Fold"
        [command]
          {CHECK_FOLD}
        [/command]
      [/option]
      [option]
        message= _ "Call |$player_bet|"
        [command]
          {CALL_CHECK}
        [/command]
      [/option]
      {ZILEAD_BET_OPTIONS}
    [/message]
  [/else]
[/if]
#enddef

#define AI_BET NUM_CARDS
[delay]
  time=2000
[/delay]
{VARIABLE n ({NUM_CARDS})}
{VARIABLE_OP desc format $gambler[$next_player].desc}
{VARIABLE_OP hand_strength format $gambler[$next_player].hand_strength}
{VARIABLE_OP hand_text format $gambler[$next_player].hand_text}

#{DEBUG_MSG "AI_BET n = |$n|"}
#{DEBUG_MSG "AI_BET hand_txt = |$hand_text|"}
#{DEBUG_MSG "AI_BET hand_strength = |$hand_strength|"}

#Almost unbeatable hand
[if]
  {VAR_EQUALS hand_strength SUPER}
  [then]
    [if]
      #Bet big pre-flop and after river
      {VAR_EQUALS n 2}
      [or]
        {VAR_EQUALS n 7}
      [/or]
      [then]
        [if]
          {VAR_EQUALS n 2}
          [then]
            {RAISE_BET 50}
          [/then]
        [/if]
        [if]
          {VAR_EQUALS n 7}
          [then]
            {RAISE_BET (50,100)}
          [/then]
        [/if]
      [/then]
      #Slow play unbeatable hand
      [else]
        {CALL_CHECK}
      [/else]
    [/if]
  [/then]
[/if]
#Very good hand
[if]
  {VAR_EQUALS hand_strength STRONG}
  [then]
    {RAISE_BET (20,50,100)}
  [/then]
[/if]
#Playable but easily beatable
[if]
  {VAR_EQUALS hand_strength GOOD}
  [then]
    {RAISE_OR_CALL (10,20)}
  [/then]
[/if]
#Barely playable
[if]
  {VAR_EQUALS hand_strength BAD}
  [then]
    {RANDOM (1..3)}
    #Player might bluff
    [if]
      {VAR_EQUALS random 1}
      [then]
        {RAISE_SMALL_FOLD_BIG (10,20,50)}
      [/then]
      #If player doesn't bluff, then he will only call small bets
      [else]
        {CALL_CHEAP}
      [/else]
    [/if]
  [/then]
[/if]
#Unplayable
[if]
  {VAR_EQUALS hand_strength UGLY}
  [then]
    {CHECK_FOLD}
  [/then]
[/if]
#enddef

#define NEXT_PLAYER_BET NUM_CARDS
{NEXT_BETTER}
{MOVE_HORSE $next_player}
{CALC_PLAYER_BET}
[if]
  {VAR_EQUALS next_player 0}
  [then]
    {ZILEAD_BET}
  [/then]
  [else]
    {AI_BET ({NUM_CARDS})}
  [/else]
[/if]
#enddef

#
# Raise if other players checked, folded, or bet small (bluff).
# Otherwise, fold.
#
#define RAISE_SMALL_FOLD_BIG RANGE
[if]
  {VAR_LESS player_bet 20}
  [then]
    {RAISE_BET ({RANGE})}
  [/then]
  [else]
    {CALL_CHEAP}
  [/else]
[/if]
#enddef

#
# Call if the bet is low. Otherwise, fold.
#
#define CALL_CHEAP
[if]
  {VAR_LESS player_bet 30}
  [then]
    {CALL_CHECK}
  [/then]
  [else]
    {CHECK_FOLD}
  [/else]
[/if]
#enddef

#
# Randomly call or raise.
#
#define RAISE_OR_CALL RANGE
{RANDOM (1..3)}
[if]
  {VAR_GREATER random 1}
  [then]
    {CALL_CHECK}
  [/then]
  [else]
    {RAISE_BET ({RANGE})}
  [/else]
[/if]
#enddef

#
# If player already made a bet, then he should only call the re-raise.
# Otherwise, player will make a bet. 
#
#define RAISE_BET RANGE
{VARIABLE_OP prev_bet to_variable gambler[$next_player].bet}
[if]
  {VAR_GREATER prev_bet 0}
  {VAR_GREATER next_player 0}
  [then]
    {CALL_CHECK}
  [/then]
  [else]
    {RANDOM ({RANGE})}
    {PLACE_BET $random}
    [if]  
      {VAR_EQUALS player_bet 0}
      [then]
        {MESSAGE_FROM_GAMBLER $next_player ( _ "Bet |$random|")}
      [/then]
      [else]
        {PLACE_BET $player_bet}
        {MESSAGE_FROM_GAMBLER $next_player ( _ "Raise |$random|")}
      [/else]
    [/if]
    {VARIABLE player_action BET}
    {VARIABLE_OP bet add $random}
  [/else]
[/if]
{CLEAR_VARIABLE prev_bet}
#enddef

#
# Call if there is a bet. Check if there is no bet.
#
#define CALL_CHECK
[if]
  {VAR_EQUALS player_bet 0}
  [then]
    {MESSAGE_FROM_GAMBLER $next_player ( _ "Check")}
    {VARIABLE player_action CHECK}
  [/then]
  [else]
    {PLACE_BET $player_bet}
    {MESSAGE_FROM_GAMBLER $next_player ( _ "Call")}
    {VARIABLE player_action CALL}
  [/else]
[/if]
#enddef

#
# Fold if there is a bet. Check if there is no bet.
#
#define CHECK_FOLD
[if]
  {VAR_EQUALS player_bet 0}
  [then]
    {MESSAGE_FROM_GAMBLER $next_player ( _ "Check")}
    {VARIABLE player_action CHECK}
  [/then]
  [else]
    {VARIABLE active_player_$next_player no}
    {VARIABLE_OP num_active_players add -1}
    {SHOW_HAND $next_player on}
    {MESSAGE_FROM_GAMBLER $next_player ( _ "Fold")}
    {VARIABLE player_action FOLD}
  [/else]
[/if]
#enddef

#define CALC_PLAYER_BET
{VARIABLE player_bet $bet}
{VARIABLE_OP prev_bet format (-$gambler[$next_player].bet)}
{VARIABLE_OP player_bet add $prev_bet}
#{DEBUG_MSG "bet: |$bet| |$prev_bet| |$player_bet|"}
#enddef

#define PLACE_BET AMT
{VARIABLE_OP neg_bet format (-{AMT})}
{VARIABLE_OP gambler[$next_player].bet add ({AMT})}
{VARIABLE_OP gambler[$next_player].gold add $neg_bet}
#{DEBUG_MSG "gold: |$neg_bet| |$gambler[$next_player].gold|"}

[if]
  {VAR_EQUALS next_player 0}
  [then]
    [gold]
      side=1
      amount=$neg_bet
    [/gold]
  [/then]
[/if]
{VARIABLE_OP pot add ({AMT})}
#enddef

######################### HAND ANALYSIS #########################

#define ANALYZE_HAND I
{VARIABLE_OP n_cards format $gambler[{I}].num_cards}
{VARIABLE analyzed_gambler ({I})}

#initialize variables
{VARIABLE suit_cards[0].count 0}
{VARIABLE suit_cards[1].count 0}
{VARIABLE suit_cards[2].count 0}
{VARIABLE suit_cards[3].count 0}
{VARIABLE max_suit 0}
{VARIABLE single_count 0}
{VARIABLE pair_count 0}
{VARIABLE trip_count 0}
{VARIABLE quad_count 0}
{VARIABLE single[0].value -1}
{VARIABLE pair[0].value -1}
{VARIABLE pair[2].value -1}
{VARIABLE trip[0].value -1}
{VARIABLE trip[1].value -1}
{VARIABLE have_ace.suit[0] no}
{VARIABLE have_ace.suit[1] no}
{VARIABLE have_ace.suit[2] no}
{VARIABLE have_ace.suit[3] no}
{VARIABLE straight_len 0}
{VARIABLE straight_prev -1}
{VARIABLE straight_flush_len 0}
{VARIABLE straight_flush_prev -1}
{VARIABLE added_value 100}

#get all possible hands
{FOR_UPTO i 0 $n_cards}
  {GET_CARD ({I}) $i}
  {VARIABLE v $card_value}
  {VARIABLE s $card_suit}

  #store cards by suit
  {VARIABLE_OP suit_count format $suit_cards[$s].count}
  {VARIABLE suit_cards[$s].value[$suit_count] $v}
  {VARIABLE_OP suit_cards[$s].count add 1}
  {VARIABLE_OP max_suit_count format $suit_cards[$max_suit].count}
  [if]
    [variable]
      name=suit_count
      greater_than=$max_suit_count
    [/variable]
    [then]
      {VARIABLE max_suit $s}
    [/then]
  [/if]

  #store all aces (for straights)
  [if]
    {VAR_EQUALS card_value $ACE}
    [then]
      {VARIABLE_OP have_ace_suit to_variable have_ace.suit[$card_suit]}
      {VARIABLE have_ace.any_suit $card_suit}
      {VARIABLE have_ace_suit yes}
      {VARIABLE_OP have_ace.count add 1}
    [/then]
  [/if]

  {VARIABLE val_higher $card_value}
  {VARIABLE_OP val_higher add 1}

  #store straight
  [if]
    {VAR_GREATER straight_len 0}
    {VAR_LESS straight_len 5}
    [then]
      #if card is 1 lower than prev card or this is first card in straight
      [if]
        {VAR_EQUALS straight_prev $val_higher}
        [then]
          {VARIABLE straight_cards.value_$straight_len $card_value}
          {VARIABLE straight_cards.suit_$straight_len $card_suit}
          {VARIABLE_OP straight_len add 1}
          {VARIABLE straight_prev $card_value}
        [/then]
      [/if]
      #add ace two straight ending with a 2
      [if]
        {VAR_LESS straight_len 5}
        {VAR_EQUALS straight_prev 2}
        {VAR_GREATER have_ace.count 0}
        [then]
          {VARIABLE straight_cards.value_$straight_len 1}
          {VARIABLE straight_cards.suit_$straight_len $have_ace.any_suit}
          {VARIABLE_OP straight_len add 1}
          {VARIABLE val_higher 2}
          {VARIABLE straight_prev 1}
        [/then]
      [/if]
      #do not save straight if it is less than 4 cards   
      [if]
        {VAR_LESS straight_len 4}
        {VAR_LESS val_higher $straight_prev}
        [then]
          {VARIABLE straight_len 0}
        [/then]
      [/if]
    [/then]
  [/if]
  #set first value of straight
  [if]
    {VAR_EQUALS straight_len 0}
    [then]
      {VARIABLE straight_cards.value_0 $card_value}
      {VARIABLE straight_cards.suit_0 $card_suit}
      {VARIABLE straight_len 1}
      {VARIABLE straight_prev $card_value}
    [/then]
  [/if]

  #store straight flush
  [if]
    {VAR_GREATER straight_flush_len 0}
    {VAR_LESS straight_flush_len 5}
    [then]
      #if card is 1 lower than prev card or this is first card in straight
      [if]
        {VAR_EQUALS straight_flush_prev $val_higher}
        {VAR_EQUALS straight_flush_cards.suit $card_suit}
        [then]
          {VARIABLE straight_flush_cards.value_$straight_flush_len $card_value}
          {VARIABLE_OP straight_flush_len add 1}
          {VARIABLE straight_flush_prev $card_value}
        [/then]
      [/if]
      #add ace two straight flush ending with a 2
      {VARIABLE_OP have_ace_suit format $have_ace.suit[$straight_flush_cards.suit]}
      [if]
        {VAR_LESS straight_flush_len 5}
        {VAR_EQUALS straight_flush_prev 2}
        {VAR_EQUALS have_ace_suit yes}
        [then]
          {VARIABLE straight_flush_cards.value_$straight_flush_len 1}
          {VARIABLE_OP straight_flush_len add 1}
          {VARIABLE straight_flush_prev 1}
          {VARIABLE val_higher 2}
        [/then]
      [/if]    
      #do not save straight flush if less than 4 cards
      [if]
        {VAR_LESS straight_flush_len 4}
        {VAR_LESS val_higher $straight_flush_prev}
        [then]
          {VARIABLE straight_flush_len 0}
        [/then]
      [/if]
    [/then]
  [/if]
  #set first card in straight flush
  [if]
    {VAR_EQUALS straight_flush_len 0}
    [then]
      {VARIABLE straight_flush_cards.value_0 $card_value}
      {VARIABLE straight_flush_cards.suit $card_suit}
      {VARIABLE straight_flush_len 1}
      {VARIABLE straight_flush_prev $card_value}
    [/then]
  [/if]

  #get values of next 3 cards
  {NEXT_CARD_VALUE ({I}) $i 1 v1 s1}
  {NEXT_CARD_VALUE ({I}) $i 2 v2 s2}
  {NEXT_CARD_VALUE ({I}) $i 3 v3 s3}
  
  #check four of a kind
  [if]
    {VAR_EQUALS v $v1}
    {VAR_EQUALS v $v2}
    {VAR_EQUALS v $v3}
    [then]
      {VARIABLE quad_count 1}
      {VARIABLE quad.value $v}
      {VARIABLE added_value $v}
    [/then]
  [/if]

  #check three of a kind
  [if]
    [variable]
      name=added_value
      greater_than=$v
    [/variable]
    {VAR_EQUALS v $v1}
    {VAR_EQUALS v $v2}
    [then]
      {VARIABLE added_value $v}
      {VARIABLE trip[$trip_count].value $v}
      {VARIABLE trip[$trip_count].suit[0] $s}
      {VARIABLE trip[$trip_count].suit[1] $s1}
      {VARIABLE trip[$trip_count].suit[2] $s2}
      {VARIABLE_OP trip_count add 1}
    [/then]
  [/if]

  #check pair
  [if]
    [variable]
      name=added_value
      greater_than=$v
    [/variable]
    {VAR_EQUALS v $v1}
    [then]
      {VARIABLE added_value $v}
      {VARIABLE pair[$pair_count].value $v}
      {VARIABLE pair[$pair_count].suit[0] $s}
      {VARIABLE pair[$pair_count].suit[1] $s1}
      {VARIABLE_OP pair_count add 1}
    [/then]
  [/if]

  #check single (no other cards with same value)
  [if]
    [variable]
      name=added_value
      greater_than=$v
    [/variable]
    [then]
      {VARIABLE added_value $v}
      {VARIABLE single[$single_count].value $v}
      {VARIABLE single[$single_count].suit $s}
      {VARIABLE_OP single_count add 1}
    [/then]
  [/if]
{NEXT i} 

#Determine best hand
{STRAIGHT_FLUSH}
[if]
  {VAR_EQUALS have_it no}
  [then]
    {FOUR_KIND}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {FULL_HOUSE}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {FLUSH}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {STRAIGHT}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {THREE_KIND}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {TWO_PAIR}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {PAIR}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {HIGH_CARD}
  [/then]
[/if]
#Set best hand
{FOR_UPTO hand_index 0 $n_cards}
  {VARIABLE_OP gambler[{I}].best_hand[$hand_index].value format $hand[$hand_index].value}
  {VARIABLE_OP gambler[{I}].best_hand[$hand_index].suit format $hand[$hand_index].suit}
{NEXT hand_index}
{VARIABLE gambler[{I}].hand_rank $hand_rank}
{VARIABLE gambler[{I}].hand_text $hand_msg}
#Determine hand's strength (for AI decisions)
[if]
  {VAR_EQUALS n_cards 2}
  [then]
    {CHECK_PLAYABLE_POCKET}
  [/then]
  [else]
    {CHECK_PLAYABLE_HAND}
  [/else]
[/if]
{VARIABLE gambler[{I}].hand_strength $hand_strength}

#Clear variables
{CLEAR_VARIABLE have_it}
{CLEAR_VARIABLE hand_index}
{CLEAR_VARIABLE suit_cards}
{CLEAR_VARIABLE max_suit}
{CLEAR_VARIABLE single_count}
{CLEAR_VARIABLE pair_count}
{CLEAR_VARIABLE trip_count}
{CLEAR_VARIABLE quad_count}
{CLEAR_VARIABLE single}
{CLEAR_VARIABLE pair}
{CLEAR_VARIABLE trip}
{CLEAR_VARIABLE have_ace}
{CLEAR_VARIABLE straight_len}
{CLEAR_VARIABLE straight_prev}
{CLEAR_VARIABLE straight_flush_len}
{CLEAR_VARIABLE straight_flush_prev}
{CLEAR_VARIABLE added_value}
#enddef

#define CHECK_PLAYABLE_POCKET
{VARIABLE hand_strength UGLY}
#read hand
{PAIR}
[if]
  {VAR_EQUALS have_it no}
  [then]
    {HIGH_CARD}
  [/then]
[/if]
#Set best pockets
{SET_POCKET_STRENGTH 14 14 no SUPER}
{SET_POCKET_STRENGTH 14 13 yes SUPER}
{SET_POCKET_STRENGTH 13 13 no SUPER}
{SET_POCKET_STRENGTH 12 12 no SUPER}
{SET_POCKET_STRENGTH 11 11 no SUPER}
#Set excellent
{SET_POCKET_STRENGTH 14 13 no STRONG}
{SET_POCKET_STRENGTH 14 12 both STRONG}
{SET_POCKET_STRENGTH 14 11 both STRONG}
{SET_POCKET_STRENGTH 14 10 yes STRONG}
{SET_POCKET_STRENGTH 13 12 both STRONG}
{SET_POCKET_STRENGTH 13 11 yes STRONG}
{SET_POCKET_STRENGTH 13 10 yes STRONG}
{SET_POCKET_STRENGTH 12 11 yes STRONG}
{SET_POCKET_STRENGTH 12 10 yes STRONG}
{SET_POCKET_STRENGTH 11 10 yes STRONG}
{SET_POCKET_STRENGTH 10 10 no STRONG}
{SET_POCKET_STRENGTH 9 9 no STRONG}
#Set good pockets
{SET_POCKET_STRENGTH 14 9 yes GOOD}
{SET_POCKET_STRENGTH 14 8 yes GOOD}
{SET_POCKET_STRENGTH 14 7 yes GOOD}
{SET_POCKET_STRENGTH 14 6 yes GOOD}
{SET_POCKET_STRENGTH 14 5 yes GOOD}
{SET_POCKET_STRENGTH 14 4 yes GOOD}
{SET_POCKET_STRENGTH 14 3 yes GOOD}
{SET_POCKET_STRENGTH 14 2 yes GOOD}
{SET_POCKET_STRENGTH 13 11 no GOOD}
{SET_POCKET_STRENGTH 12 11 no GOOD}
{SET_POCKET_STRENGTH 11 10 no GOOD}
{SET_POCKET_STRENGTH 11 9 yes GOOD}
{SET_POCKET_STRENGTH 10 9 yes GOOD}
{SET_POCKET_STRENGTH 9 8 yes GOOD}
{SET_POCKET_STRENGTH 8 7 yes GOOD}
{SET_POCKET_STRENGTH 8 8 no GOOD}
{SET_POCKET_STRENGTH 7 7 no GOOD}
#Set bad (but playable) hands
{SET_POCKET_STRENGTH 7 6 yes BAD}
{SET_POCKET_STRENGTH 6 5 yes BAD}
{SET_POCKET_STRENGTH 5 4 yes BAD}
{SET_POCKET_STRENGTH 4 3 yes BAD}
{SET_POCKET_STRENGTH 3 2 yes BAD}
{SET_POCKET_STRENGTH 6 6 no BAD}
{SET_POCKET_STRENGTH 5 5 no BAD}
{SET_POCKET_STRENGTH 4 4 no BAD}
{SET_POCKET_STRENGTH 3 3 no BAD}
{SET_POCKET_STRENGTH 2 2 no BAD}
#enddef

#define CHECK_PLAYABLE_HAND
#high card is UGLY
{VARIABLE hand_strength UGLY}
#straight flush, quad, and full house are SUPER
{STRAIGHT_FLUSH_FROM_POCKET}
[if]
  {VAR_EQUALS have_it no}
  [then]
    {QUAD_FROM_POCKET}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {FULL_HOUSE_FROM_POCKET}
  [/then]
[/if]
#flush, straight, and trip are GOOD
[if]
  {VAR_EQUALS have_it no}
  [then]
    {FLUSH_FROM_POCKET}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {STRAIGHT_FROM_POCKET}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {TRIP_FROM_POCKET}
  [/then]
[/if]
#two pairs, and top pair are good (a low pair is BAD)
[if]
  {VAR_EQUALS have_it no}
  [then]
    {TWO_PAIR_FROM_POCKET}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {TOP_PAIR_FROM_POCKET}
  [/then]
[/if]
#flush draw and open-ended straight draw are BAD
[if]
  {VAR_EQUALS have_it no}
  [then]
    {FLUSH_DRAW_FROM_POCKET}
  [/then]
[/if]
[if]
  {VAR_EQUALS have_it no}
  [then]
    {STRAIGHT_DRAW_FROM_POCKET}
  [/then]
[/if]
#enddef

#define HIGH_CARD
{VARIABLE have_it no}
[if]
  {VAR_GREATER single_count 0}
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_HIGH_CARD}
    {FOR_UPTO i 0 $single_count}
      {VARIABLE_OP hand[$i].value format $single[$i].value}
      {VARIABLE_OP hand[$i].suit format $single[$i].suit}
    {NEXT i}
    [if]
      {VAR_EQUALS n_cards 2}
      [then]
        {VALUE_STRING $hand[0].value high_card1}
        {VALUE_STRING $hand[1].value high_card2}
        {VARIABLE_OP hand_msg format "|$high_card1| and |$high_card2|"}
      [/then]
      [else]
        {VALUE_STRING $hand[0].value high_card}
        {VARIABLE_OP hand_msg format "high card |$high_card|"}
      [/else]
    [/if]
  [/then]
[/if]
#enddef

#define PAIR
{VARIABLE have_it no}
[if]
  {VAR_EQUALS pair_count 1}
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_PAIR}
    {VARIABLE hand[0].value $pair[0].value}
    {VARIABLE hand[0].suit $pair[0].suit[0]}
    {VARIABLE hand[1].value $pair[0].value}
    {VARIABLE hand[1].suit $pair[0].suit[1]}
    {FOR_UPTO i 0 $single_count}
      {VARIABLE j $i}
      {VARIABLE_OP j add 2}
      {VARIABLE_OP hand[$j].value format $single[$i].value}
      {VARIABLE_OP hand[$j].suit format $single[$i].suit}
    {NEXT i}
    {VALUE_STRING $hand[0].value pair_card}
    [if]
      {VAR_EQUALS n_cards 2}
      [then]    
        {VARIABLE_OP hand_msg format "pocket |$pair_card|s"}
      [/then]
      [else]
        {VALUE_STRING $hand[2].value high_card}
        {VARIABLE_OP hand_msg format "pair of |$pair_card|s (high card |$high_card|)"}
      [/else]
    [/if]
  [/then]
[/if]
#enddef

#define TWO_PAIR
{VARIABLE have_it no}
[if]
  {VAR_GREATER pair_count 1}
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_TWO_PAIR}
    #two pairs
    {VARIABLE_OP hand[0].value format $pair[0].value}
    {VARIABLE_OP hand[0].suit format $pair[0].suit[0]}
    {VARIABLE_OP hand[1].value format $pair[0].value}
    {VARIABLE_OP hand[1].suit format $pair[0].suit[1]}
    {VARIABLE_OP hand[2].value format $pair[1].value}
    {VARIABLE_OP hand[2].suit format $pair[1].suit[0]}
    {VARIABLE_OP hand[3].value format $pair[1].value}
    {VARIABLE_OP hand[3].suit format $pair[1].suit[1]}
    #high card
    {VARIABLE_OP hand[4].value format $single[0].value}
    {VARIABLE_OP hand[4].suit format $single[0].suit}
    #if have 3 pairs and 3rd pair greater than single
    [if]
      {VAR_LESS hand[4].value $pair[2].value}
      [then]
        #set high card to third pair's value
        {VARIABLE_OP hand[4].value format $pair[2].value}
        {VARIABLE_OP hand[4].suit format $pair[2].suit[0]}
      [/then]
    [/if]  
    {VALUE_STRING $hand[0].value p1}
    {VALUE_STRING $hand[2].value p2}
    {VALUE_STRING $hand[4].value high_card}
    {VARIABLE_OP hand_msg format "two pairs (|$p1|s and |$p2|s, |$high_card| high)"}
  [/then]
[/if]
#enddef

#define THREE_KIND
{VARIABLE have_it no}
[if]
  {VAR_EQUALS trip_count 1}
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_THREE_KIND}
    #add trip
    {FOR_UPTO i 0 3}
      {VARIABLE_OP hand[$i].value format $trip[0].value}
      {VARIABLE_OP hand[$i].suit format $trip[0].suit[$i]}
    {NEXT i}
    #add two high cards
    {VARIABLE_OP hand[3].value format $single[0].value}
    {VARIABLE_OP hand[3].suit format $single[0].suit}
    {VARIABLE_OP hand[4].value format $single[1].value}
    {VARIABLE_OP hand[4].suit format $single[1].suit}
    {VALUE_STRING $trip[0].value s1}
    {VALUE_STRING $single[0].value s2}
    {VARIABLE_OP hand_msg format "three |$s1|s (|$s2| high)"}
  [/then]
[/if]
#enddef

#define STRAIGHT
{VARIABLE have_it no}
[if]
  {VAR_GREATER straight_len 4}
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_STRAIGHT}
    #add straight
    {FOR_UPTO i 0 5}
      {VARIABLE_OP hand[$i].value format $straight_cards.value_$i}
      {VARIABLE_OP hand[$i].suit format $straight_cards.suit_$i}
    {NEXT i}
    {VALUE_STRING $hand[4].value s1}
    {VALUE_STRING $hand[0].value s2}
    {VARIABLE_OP hand_msg format "straight (|$s1| to |$s2|)"}
  [/then]
[/if]
{CLEAR_VARIABLE s1}
{CLEAR_VARIABLE s2}
#enddef

#define FLUSH
{VARIABLE have_it no}
{VARIABLE_OP max_suit_count format $suit_cards[$max_suit].count}
[if]
  {VAR_GREATER max_suit_count 4}
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_FLUSH}
    #add flush
    {FOR_UPTO i 0 5}
      {VARIABLE_OP hand[$i].value format $suit_cards[$max_suit].value[$i]}
      {VARIABLE hand[$i].suit $max_suit}
    {NEXT i}
    {VALUE_STRING $hand[0].value high_card}
    {VARIABLE_OP hand_msg format "flush (|$high_card| high)"}
  [/then]
[/if]
{CLEAR_VARIABLE high_card}
#enddef

#define FULL_HOUSE
{VARIABLE pair_high -1}
{VARIABLE trip_high -1}
{VARIABLE have_it no}
#full house is highest trip and max(highest pair, second highest trip}
[if]
  {VAR_GREATER trip_count 1}
  [or]
    {VAR_GREATER trip_count 0}
    {VAR_GREATER pair_count 0}
  [/or]
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_FULL_HOUSE}
    {FOR_UPTO i 0 3}
      {VARIABLE_OP hand[$i].value format $trip[0].value}
      {VARIABLE_OP hand[$i].suit format $trip[0].suit[$i]}
    {NEXT i}
    #add pair to hand
    {VARIABLE_OP hand[3].value format $pair[0].value}
    {VARIABLE_OP hand[3].suit format $pair[0].suit[0]}
    {VARIABLE_OP hand[4].value format $pair[0].value}
    {VARIABLE_OP hand[4].suit format $pair[0].suit[1]}
    #replace pair if greater-valued second trip exists
    [if]
      {VAR_LESS hand[3].value $trip[1].value}
      [then]
        {VARIABLE_OP hand[3].value format $trip[1].value}
        {VARIABLE_OP hand[3].suit format $trip[1].suit[0]}
        {VARIABLE_OP hand[4].value format $trip[1].value}
        {VARIABLE_OP hand[4].suit format $trip[1].suit[1]}
      [/then]
    [/if]
    {VALUE_STRING $hand[0].value s1}
    {VALUE_STRING $hand[3].value s2}
    {VARIABLE_OP hand_msg format "full house (|$s1|s full of |$s2|s)"}
  [/then]
[/if]
#enddef

#define FOUR_KIND
{VARIABLE have_it no}
[if]
  {VAR_EQUALS quad_count 1}
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_FOUR_KIND}
    #add 4 of a kind
    {FOR_UPTO i 0 4}
      {VARIABLE_OP hand[$i].value format $quad.value}
      {VARIABLE hand[$i].suit $i}
    {NEXT i}
    #add high card
    {VARIABLE hand[4].value $single[0].value}
    {VARIABLE hand[4].suit $single[0].suit} 
    #check if pair is higher than high card
    [if]
      {VAR_LESS hand[4].value $pair[0].value}
      [then]
        {VARIABLE hand[4].value $pair[0].value}
        {VARIABLE hand[4].suit $pair[0].suit[0]}
      [/then]
    [/if]
    #check if trip is higher than high card
    [if]
      {VAR_LESS hand[4].value $trip[0].value}
      [then]
        {VARIABLE hand[4].value $trip[0].value}
        {VARIABLE hand[4].suit $trip[0].suit[0]}
      [/then]
    [/if]
    {VALUE_STRING $quad.value qv}
    {VALUE_STRING $hand[4].value $high_card}
    {VARIABLE_OP hand_msg format "four |$qv|s (|$high_card| high)"}
  [/then]
[/if]
#enddef

#define STRAIGHT_FLUSH
{VARIABLE have_it no}
[if]
  {VAR_GREATER straight_flush_len 4}
  [then]
    {VARIABLE have_it yes}
    {VARIABLE hand_rank $HAND_STRAIGHT_FLUSH}
    {FOR_UPTO i 0 5}
      {VARIABLE_OP hand[$i].value format $straight_flush_cards.value_$i}
      {VARIABLE_OP hand[$i].suit format $straight_flush_cards.suit}
    {NEXT i}
    {VALUE_STRING $straight_flush_cards.value_0 high_card}
    {VARIABLE_OP hand_msg format "straight flush (|$high_card| high)"}
  [/then]
[/if]
#enddef

#define OPEN_ENDED_STRAIGHT_DRAW
{VARIABLE have_it no}
[if]
  {VAR_LESS n_cards 7}
  {VAR_EQUALS straight_len 4}
  {VAR_LESS straight_cards.value_0 $ACE}
  {VAR_GREATER straight_cards.value_3 1}
  [then]
    {VARIABLE have_it yes}
    {FOR_UPTO i 0 4}
      {VARIABLE_OP hand[$i].value format $straight_cards.value_$i}
      {VARIABLE_OP hand[$i].suit format $straight_cards.suit_$i}
    {NEXT i}
    {VALUE_STRING $hand[3].value s1}
    {VALUE_STRING $hand[0].value s2}
    {VARIABLE_OP hand_msg format "open-ended straight draw (|$s1| to |$s2|)"}
  [/then]
[/if]
#enddef

#define FLUSH_DRAW
{VARIABLE have_it no}
{VARIABLE_OP max_suit_count format $suit_cards[$max_suit].count}
[if]
  {VAR_LESS n_cards 7}
  {VAR_EQUALS max_suit_count 4}
  [then]
    {VARIABLE have_it yes}
    {FOR_UPTO i 0 $max_suit_count}
      {VARIABLE_OP hand[$i].value format $suit_cards[$max_suit].value[$i]}
      {VARIABLE hand[$i].suit $max_suit}
    {NEXT i}

    {VALUE_STRING $hand[0].value high_card}
    {VARIABLE_OP hand_msg format "flush draw (|$high_card| high)"}
  [/then]
[/if]
#enddef

#define POCKET_PAIR
{VARIABLE have_it no}
[if]
  {VAR_EQUALS n_cards 2}
  [then]
    {PAIR}
  [/then]
[/if]
#enddef

#define SET_POCKET_STRENGTH P1 P2 SUITED STRENGTH
{VARIABLE suited ({SUITED})}
{VARIABLE pocket_match yes}

#pocket values must equal P1 and P2
[if]
  {VAR_EQUALS hand[0].value ({P1})}
  {VAR_EQUALS hand[1].value ({P2})}
  [else]
    {VARIABLE pocket_match no}
  [/else]
[/if]

#if SUITED = yes, then suits must be same
[if]
  {VAR_EQUALS pocket_match yes}
  {VAR_EQUALS suited yes}
  [then]
    [if]
      {VAR_EQUALS hand[0].suit $hand[1].suit}
      [else]
        {VARIABLE pocket_match no}
      [/else]
    [/if]
  [/then]
[/if]

#if SUITED = no, then suits must be different
[if]
  {VAR_EQUALS pocket_match yes}
  {VAR_EQUALS suited no}
  {VAR_EQUALS hand[0].suit $hand[1].suit}
  [then]
    {VARIABLE pocket_match no}
  [/then]
[/if]

#set strength
[if]
  {VAR_EQUALS pocket_match yes}
  [then]
    {VARIABLE hand_strength ({STRENGTH})}
  [/then]
[/if]
#enddef

#
# Set have_it to "no" if neither of the pocket cards is one of the best 
# N cards in the player's hand.
#
# Precondition: have_it = yes
#
#define CHECK_POCKET_IN_HAND N
[if]
  {VAR_EQUALS have_it yes}
  [then]
    {VARIABLE hand_index 0}
    {VARIABLE have_it no}
    [while]
      {VAR_LESS hand_index ({N})}
      {VAR_EQUALS have_it no}
      [do]
        {VARIABLE_OP vh format $hand[$hand_index].value}
        {VARIABLE_OP sh format $hand[$hand_index].suit}
        {VARIABLE_OP v1 format $gambler[$analyzed_gambler].card1.value}
        {VARIABLE_OP v2 format $gambler[$analyzed_gambler].card2.value}
        {VARIABLE_OP s1 format $gambler[$analyzed_gambler].card1.suit}
        {VARIABLE_OP s2 format $gambler[$analyzed_gambler].card2.suit}
        #{DEBUG_MSG "(|$vh|,|$sh|) (|$v1|,|$s1|) (|$v2|,|$s2|)"}
        [if]
          {VAR_EQUALS v1 $vh}
          {VAR_EQUALS s1 $sh}
          [or]
            {VAR_EQUALS v2 $vh}
            {VAR_EQUALS s2 $sh}
          [/or]
          [then]
            {VARIABLE have_it yes}
          [/then]
        [/if]
        {VARIABLE_OP hand_index add 1}
      [/do]
    [/while]
    {CLEAR_VARIABLE hand_index}
    {CLEAR_VARIABLE vh}
    {CLEAR_VARIABLE sh}
    {CLEAR_VARIABLE v1}
    {CLEAR_VARIABLE v2}
    {CLEAR_VARIABLE s1}
    {CLEAR_VARIABLE s2}
  [/then]
[/if]
#enddef

#define SET_HAND_STRENGTH STRENGTH
[if]
  {VAR_EQUALS have_it yes}
  [then]
    {VARIABLE hand_strength ({STRENGTH})}
  [/then]
[/if]
#enddef

#define FLUSH_DRAW_FROM_POCKET
{FLUSH_DRAW}
{CHECK_POCKET_IN_HAND 4}
{SET_HAND_STRENGTH BAD}
#enddef

#define STRAIGHT_DRAW_FROM_POCKET
{OPEN_ENDED_STRAIGHT_DRAW}
{CHECK_POCKET_IN_HAND 4}
{SET_HAND_STRENGTH BAD}
#enddef

#define TOP_PAIR_FROM_POCKET
{PAIR}
{CHECK_POCKET_IN_HAND 2}
[if]
  {VAR_GREATER hand[0].value 9}
  [then]
    #high pair
    {SET_HAND_STRENGTH GOOD}
  [/then]
  [else]
    #low pair
    {SET_HAND_STRENGTH BAD}
  [/else]
[/if]
#enddef

#define TWO_PAIR_FROM_POCKET
{TWO_PAIR}
{CHECK_POCKET_IN_HAND 4}
{SET_HAND_STRENGTH GOOD}
#enddef

#define TRIP_FROM_POCKET
{THREE_KIND}
{CHECK_POCKET_IN_HAND 3}
{SET_HAND_STRENGTH STRONG}
#enddef

#define STRAIGHT_FROM_POCKET
{STRAIGHT}
{CHECK_POCKET_IN_HAND 5}
{SET_HAND_STRENGTH STRONG}
#enddef

#define FLUSH_FROM_POCKET
{FLUSH}
{CHECK_POCKET_IN_HAND 5}
{SET_HAND_STRENGTH STRONG}
#enddef

#define FULL_HOUSE_FROM_POCKET
{FULL_HOUSE}
{CHECK_POCKET_IN_HAND 5}
{SET_HAND_STRENGTH SUPER}
#enddef

#define QUAD_FROM_POCKET
{FOUR_KIND}
{CHECK_POCKET_IN_HAND 4}
{SET_HAND_STRENGTH SUPER}
#enddef

#define STRAIGHT_FLUSH_FROM_POCKET
{STRAIGHT_FLUSH}
{CHECK_POCKET_IN_HAND 5}
{SET_HAND_STRENGTH SUPER}
#enddef

#define VALUE_STRING N VAR
{VARIABLE value_of_card ({N})}
[if]
  {VAR_LESS value_of_card 11}
  {VAR_GREATER value_of_card 1}
  [then]
    {VARIABLE value_string $value_of_card}
  [/then]
  [else]
    #ace
    [if]
      {VAR_EQUALS value_of_card 1}
      [or]
        {VAR_EQUALS value_of_card 14}
      [/or]
      [then]
        {VARIABLE value_string A}
      [/then]
    [/if]
    #king
    [if]
      {VAR_EQUALS value_of_card 13}
      [then]
        {VARIABLE value_string K}
      [/then]
    [/if]
    #queen
    [if]
      {VAR_EQUALS value_of_card 12}
      [then]
        {VARIABLE value_string Q}
      [/then]
    [/if]
    #jack
    [if]
      {VAR_EQUALS value_of_card 11}
      [then]
        {VARIABLE value_string J}
      [/then]
    [/if]
  [/else]
[/if]
{VARIABLE ({VAR}) $value_string}
{CLEAR_VARIABLE value_string}
{CLEAR_VARIABLE value_of_card}
#enddef

#define NEXT_CARD_VALUE I IDX IDX_ADD V_VAR S_VAR
{VARIABLE card_idx ({IDX})}
{VARIABLE_OP card_idx add ({IDX_ADD})}
{VARIABLE max_next_idx $gambler[{I}].num_cards}
{VARIABLE_OP max_next_idx add -1}
[if]
  [variable]
    name=card_idx
    greater_than=$max_next_idx
  [/variable]
  [or]
    [variable]
      name=card_idx
      less_than=0
    [/variable]
  [/or]
  [then]
    {VARIABLE ({V_VAR}) -1}
    {VARIABLE ({S_VAR}) -1}
  [/then]
  [else]
    {GET_CARD ({I}) $card_idx}
    {VARIABLE ({V_VAR}) $card_value}
    {VARIABLE ({S_VAR}) $card_suit}
  [/else]
[/if]
#enddef

